{"version":3,"file":"static/js/main.6e82c9d8.js","mappings":"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","sources":["index.js"],"sourcesContent":["import './index.css'; \n\nlet brands = [];\nlet products = [];\n\n// Handle brand addition\ndocument.getElementById('addBrandButton').addEventListener('click', () => {\n  const brand = document.getElementById('brand').value;\n  if (!brand) {\n    alert('Please enter a valid brand.');\n    return;\n  }\n  brands.push(brand);\n  updateBrandList();\n  updateProductBrandOptions();\n  document.getElementById('brand').value = ''; // Clear input field\n});\n\n// Update the list of brands\nfunction updateBrandList() {\n  const brandListElement = document.getElementById('brandList');\n  brandListElement.innerHTML = ''; // Clear current list\n\n  brands.forEach(brand => {\n    const listItem = document.createElement('li');\n    listItem.classList.add('product-item');\n    listItem.textContent = brand;\n    brandListElement.appendChild(listItem);\n  });\n}\n\n// Update the product brand dropdown\nfunction updateProductBrandOptions() {\n  const productBrandSelect = document.getElementById('productBrand');\n  productBrandSelect.innerHTML = '<option value=\"\" disabled selected>Select a brand</option>'; // Reset options\n\n  brands.forEach(brand => {\n    const option = document.createElement('option');\n    option.value = brand;\n    option.textContent = brand;\n    productBrandSelect.appendChild(option);\n  });\n}\n\n// Handle product addition\ndocument.getElementById('addProductButton').addEventListener('click', () => {\n  const productPrice = document.getElementById('productPrice').value;\n  const productBrand = document.getElementById('productBrand').value;\n\n  if (!productPrice || isNaN(productPrice) || productPrice <= 0 || !productBrand) {\n    alert('Please enter a valid product price and select a brand.');\n    return;\n  }\n\n  products.push({ price: parseFloat(productPrice), brand: productBrand });\n  updateProductList();\n  document.getElementById('productPrice').value = ''; // Clear input field\n  document.getElementById('productBrand').value = ''; // Clear select field\n});\n\n// Update the list of products\nfunction updateProductList() {\n  const productListElement = document.getElementById('productList');\n  productListElement.innerHTML = ''; // Clear current list\n\n  products.forEach(product => {\n    const listItem = document.createElement('li');\n    listItem.classList.add('product-item');\n    listItem.textContent = `${product.brand}: $${product.price.toFixed(2)}`;\n    productListElement.appendChild(listItem);\n  });\n}\n\n// Handle sending notifications\ndocument.getElementById('sendButton').addEventListener('click', async () => {\n  const token = document.getElementById('token').value;\n  const startNumber = document.getElementById('startNumber').value;\n  const notificationInterval = document.getElementById('notificationInterval').value;\n  const notificationsPerInterval = document.getElementById('notificationsPerInterval').value;\n  const notificationsCount = document.getElementById('notificationsCount').value;\n\n  if (!startNumber || !notificationInterval || !notificationsCount || !notificationsPerInterval || !token || products.length === 0) {\n    alert('Please fill in all fields.');\n    return;\n  }\n\n  const orderPrefix = \"Order #\";\n  let currentOrderNumber = parseInt(startNumber);\n  let sentNotifications = 0;\n\n  // En lugar de setInterval, usaremos un bucle async para asegurarnos de que las notificaciones se envíen una por una\n  for (let i = 0; sentNotifications < notificationsCount; i++) {\n    // Group products by brand\n    const productsByBrand = brands.map(brand => products.filter(product => product.brand === brand));\n\n    // Randomly select a brand and then select products from that brand\n    const randomBrandProducts = productsByBrand[Math.floor(Math.random() * productsByBrand.length)];\n\n    // Randomly select 1, 2, or 3 products, allowing repetition\n    const itemsCount = Math.floor(Math.random() * 3) + 1;\n    const selectedProducts = [];\n    let totalPrice = 0;\n\n    for (let j = 0; j < itemsCount; j++) {\n      const randomProduct = randomBrandProducts[Math.floor(Math.random() * randomBrandProducts.length)];\n      selectedProducts.push(randomProduct);\n      totalPrice += randomProduct.price;\n    }\n\n    // Assuming all selected products are from the same brand, we get the brand from the first product\n    const brandName = selectedProducts[0].brand;\n    const itemsWord = itemsCount === 1 ? 'item' : 'items';\n    const description = `$${totalPrice.toFixed(2)}, ${itemsCount} ${itemsWord} from Online Store · ${brandName}`;\n\n    // En lugar de hacer el envío inmediatamente, ahora hacemos un \"await\" para cada notificación\n    for (let j = 0; j < notificationsPerInterval && sentNotifications < notificationsCount; j++) {\n      const message = {\n        token: token,\n        title: `${orderPrefix}${currentOrderNumber}`,\n        body: description,\n        sound: 'shopify_purchase_sound.wav',\n        data: { withSome: 'data' },\n      };\n\n      try {\n        // Agrega un \"await\" aquí para esperar a que la solicitud de la notificación termine antes de continuar\n        const response = await fetch('https://shopinoti-backend.onrender.com/send-notification', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(message),\n        });\n\n        const result = await response.json();\n\n        if (response.ok) {\n          sentNotifications++;\n          currentOrderNumber++; // Increment order number\n          console.log(`Notification sent: Order #${currentOrderNumber - 1}, Description: ${description}`);\n        } else {\n          console.error('Error sending notification:', result);\n        }\n\n      } catch (error) {\n        console.error('Network error:', error);\n        break;  // Stop the loop in case of an error\n      }\n    }\n\n    // Pausar el bucle durante el intervalo especificado\n    await new Promise(resolve => setTimeout(resolve, notificationInterval * 1000));\n  }\n\n  document.getElementById('message').textContent = 'All notifications have been sent.';\n});\n"],"names":["brands","products","document","getElementById","addEventListener","brand","value","push","brandListElement","innerHTML","forEach","listItem","createElement","classList","add","textContent","appendChild","updateBrandList","productBrandSelect","option","updateProductBrandOptions","alert","productPrice","productBrand","isNaN","price","parseFloat","productListElement","product","concat","toFixed","updateProductList","async","token","startNumber","notificationInterval","notificationsPerInterval","notificationsCount","length","currentOrderNumber","parseInt","sentNotifications","i","productsByBrand","map","filter","randomBrandProducts","Math","floor","random","itemsCount","selectedProducts","totalPrice","j","randomProduct","brandName","itemsWord","description","message","title","body","sound","data","withSome","response","fetch","method","headers","JSON","stringify","result","json","ok","console","log","error","Promise","resolve","setTimeout"],"sourceRoot":""}